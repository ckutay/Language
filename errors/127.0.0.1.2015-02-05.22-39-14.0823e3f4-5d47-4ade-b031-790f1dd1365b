(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'center'"
p3
sS'layer'
p4
S'/usr/local/web2py/applications/Bundjalung/controllers/learning.py'
p5
sS'code'
p6
S'#################\n#Interface to nltk for languages\n#\n#################\n# -*- coding: utf-8 -*-\n# try something like\n\nimport altk\nfrom altk.dictionary import *\nfrom altk.tagger import *\nfrom altk.stemmer import *\nimport urllib\nimport nltk, re, pprint # NLTK and related modules -- are these all needed?\nfrom nltk.corpus import abc\n\nimport os, sys\nwd = dictionary.AboriginalLanguageDictionary()\nws = stemmer.AboriginalLanguageStemmer()\nfrom  nltk.tokenize.punkt import PunktWordTokenizer\n\n\ndef translate_word(word, lang):\n                print word\n                reduced_word = ws.stem(word, hide_suffixes = False, show_translation = True, show_pos=True)\n\n                stem = reduced_word[0]\n                translated_stem = translate_stem(stem, lang)\n\n                translated_suffixes = reduced_word[1]\n                # if translated_stem[0]=="": return (translated_stem, translated_suffixes)\n\n                reduced_word_part = ws.stem(translated_stem[0], hide_suffixes = False, show_translation = True)\n\n                translated_stem = translated_stem + translate_stem(reduced_word_part[0],lang)\n                translated_suffixes = translated_suffixes + reduced_word_part[1]\n\n                return (translated_stem, translated_suffixes)\n\ndef translate_stem(stem, lang):\n\n                if lang!="English":\n\t\t\tif wd.has_word(stem):\n\n\t                        return (stem, wd.getEnglish(stem), wd.getPartEng(stem))\n\t\telse:\t\n\t\t\t\n\t\t\tif wd.has_eng_word(stem):\t\t\n\t\t\t\treturn (stem, wd.getLanguage(stem), wd.getPartLang(stem))\n\t\treturn (stem, stem, \'Unknown\')\n\ndef print_words(words):\n                AboriginalLanguage = ""\n                english = ""\n                pos=""\n                for word in words:\n\n                        printed_word = print_word(word)\n\n                        AboriginalLanguage += printed_word[0] +" "\n                        english +=  printed_word[1] +" "\n                        pos+= printed_word[2]+" "\n\n                return [AboriginalLanguage, english, pos]\n\ndef print_word(word):\n    stem = word[0]\n    suffixes = word[1]\n\n    printed_stem = print_stem(stem)\n    AboriginalLanguage = printed_stem[0]\n    english = printed_stem[1]\n    pos=printed_stem[2]\n    for suffix in suffixes:\n        printed_suffix = print_suffix(suffix)\n        AboriginalLanguage +=  printed_suffix[0]\n        english += printed_suffix[1]\n        pos+=printed_suffix[2]\n    return [AboriginalLanguage, english,pos]\n\ndef print_stem(stem):\n\n                AboriginalLanguage = stem[0]\n                english = stem[1]\n                 #create array\n                pos=stem[2]\n                w_length = len(AboriginalLanguage)\n                e_length = len(english)\n\n                length = max(w_length, e_length)\n                AboriginalLanguage = AboriginalLanguage.center(length)\n                english = english.center(length)\n                pos = pos.center(length)\n                return [AboriginalLanguage, english, pos]\n\ndef print_suffix(suffix):\n                AboriginalLanguage = "-" + suffix[0]\n                english = " " + suffix[1]\n                pos = " "+suffix[2]\n                w_length = len(AboriginalLanguage)\n                e_length = len(english)\n\n                length = max(w_length, e_length)\n                AboriginalLanguage = AboriginalLanguage.center(length)\n                english = english.center(length)\n                pos= pos.center(length)\n                return [AboriginalLanguage, english, pos]\n\n\ndef parser():\n    logging.warn(\'parging\')\n    words=None\n    searchterm=request.vars.query\n    type=request.vars.type\n\n\t#null searches\n    if not(request.vars):\n    \treturn dict(wordlist=True, words=words)\n    elif not(searchterm):\n    \tredirect (URL(r=request,c="language",f="dictionary"))\n    elif (\' \' in searchterm):\n\tpass\n    else:\n\tredirect (URL(r=request,c="language",f="dictionary",vars={\'query\':searchterm, \'type\':type}))\n\n    typequery=request.vars.type\n### add reference to example sentences\n    if typequery=="English":\n                query= dblanguage.BundjalungExamples.English.like(\'%%%s%%\' % searchterm)\n    else:\n                query= dblanguage.BundjalungExamples.Language.like(\'%%%s%%\' % searchterm)\n    words=dblanguage(query)\n    try:\n\twords=words.select()\n    except:\n\tredirect (URL(r=request,c="language",f="dictionary",vars={\'query\':searchterm, \'type\':type}))\n    if (words):\n\treturn dict(wordlist=False, words=words, query=searchterm)\n    else:\n\t\tnewwords = PunktWordTokenizer().tokenize(searchterm)\n\t\twords = []\n\t\n                for word in newwords:\n                \twords+= [translate_word(word, typequery)]   \n    \t\tlang=[]\n    \t\tenglish=[]\n    \t\tpos=[]\n    \t\tfor word in words:\n                        printed_word = print_word(word)\n                        lang.append(printed_word[0])\n                        english.append(printed_word[1])\n                        pos.append(printed_word[2])\n    \t\twords=[lang,english,pos]\n    return dict(wordlist=True, words=words, query=request.vars.query)\n\n\ndef pages():\n    w = db.plugin_wiki_page\n    t=db.plugin_wiki_tag\n    taglist=db(t.id>0).select(orderby=t.id)\n    words=None\n    if plugin_wiki_editor:\n            pages = db(w.worksheet==True).select(orderby=w.title)\n    else:\n                pages = db(w.worksheet==True)(w.is_public==True).select(orderby=w.title)\n\n    if plugin_wiki_editor:\n                form=SQLFORM.factory(Field(\'title\',requires=db.plugin_wiki_page.title.requires),\n                             Field(\'from_template\',requires=IS_EMPTY_OR(IS_IN_DB(db,db.plugin_wiki_page.title))))\n                if form.accepts(request.vars):\n                        title=request.vars.title\n                        page =db(w.title==title).select().first()\n                        if not page:\n                                page = w.insert(slug=title.replace(\' \',\'_\'),\n                                title=title,\n                                body=request.vars.template and w(slug=request.vars.template).body or \'\')\n                        redirect(URL(r=request,f=\'edit_page\',args=form.vars.title,vars=dict(template=request.vars.from_template or \'\')))\n    else:\n                form=\'\'\n    return dict(query=request.vars.query, taglist=taglist, pages=pages, form=form)\n\ndef page():\n    """\n    shows a page\n    """\n    slug= request.args(0)\n    import re\n    if slug=="Index" or slug==None:\n        redirect(URL(r=request, c=\'plugin_wiki\', f=\'index.html\'))\n    if slug=="Admin_Help" and not auth.user:\n        redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n\n\n    w = db.plugin_wiki_page\n    page = w(slug=slug)\n    #for template\n    if (not page or not page.is_public or not page.is_active):\n         if plugin_wiki_editor:\n                redirect(URL(r=request, c=\'plugin_wiki\', f=\'edit_page\', args=request.args))\n         if (session):session.flash=T("Page not available")\n\n         redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n    elif page and page.role and not auth.has_membership(page.role):\n        raise HTTP(404)\n        # parse pages. First History\n    if page.worksheet:\n        page.questions=[]\n    page.attachments=[]\n    a=db.plugin_wiki_attachment\n    query = (a.tablename=="page")&(a.record_id==page.id)\n    page.attachments=db(query).select()\n    tag=page.tags\n    tags=tag.split(\'|\')\n    page_body=page.body\n    if (page.worksheet):page_body = wsread_page(page)\n    page=wsread_question(page_body, page)\n    title=page.title\n    page_body=page.body\n    result  = parser()\n\n    #if not returned\n    return dict(form="", title=page.title, page=page, page_body=page_body, slug=slug)\n\nresponse._vars=response._caller(parser)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/local/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/usr/local/web2py/applications/Bundjalung/controllers/learning.py", line 223, in <module>\n  File "/usr/local/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/local/web2py/applications/Bundjalung/controllers/learning.py", line 148, in parser\n    printed_word = print_word(word)\n  File "/usr/local/web2py/applications/Bundjalung/controllers/learning.py", line 69, in print_word\n    printed_stem = print_stem(stem)\n  File "/usr/local/web2py/applications/Bundjalung/controllers/learning.py", line 92, in print_stem\n    pos = pos.center(length)\nAttributeError: \'NoneType\' object has no attribute \'center\'\n'
p11
s.