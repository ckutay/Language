(dp1
S'output'
p2
S'<class \'_mysql_exceptions.ProgrammingError\'> (1146, "Table \'Bundjalung.Resources\' doesn\'t exist")'
p3
sS'layer'
p4
S'/usr/local/web2py/applications/Bundjalung/controllers/plugin_wiki.py'
p5
sS'code'
p6
S'# This file was developed by Massimo Di Pierro\n# It is released under BSD, MIT and GPL2 licenses\n\n##########################################################\n# code to handle wiki pages\n##########################################################\n\n###\n#@auth.requires_login()\n###\nimport os\n\ndef search():\n    words=None\n    pages=None\n    if request.vars.query:\n\tsearchterm=request.vars.query\n\ttypequery=request.vars.type\n        query = (db.plugin_wiki_page.body.like(\'%%%s%%\' % searchterm) |db.plugin_wiki_page.title.like(\'%%%s%%\' % searchterm) )\n        pages = db(query).select(db.plugin_wiki_page.title,db.plugin_wiki_page.summary, db.plugin_wiki_page.slug,db.plugin_wiki_page.tags,\n                                 orderby=db.plugin_wiki_page.title)\n\tif typequery=="English":\n\t\tquery= dblanguage.Bundjalung.English.like(\'%%%s%%\' % searchterm) \n\telse:\n\t\tquery= dblanguage.Bundjalung.Language_Word.like(\'%%%s%%\' % searchterm) \n\twords=dblanguage(query).select()\n    return dict(words=words, pages=pages, query=request.vars.query)\n\n\ndef pages():\n    w = db.plugin_wiki_page\n    t=db.plugin_wiki_tag\n    taglist=db(t.id>0).select(orderby=t.id)\n    words=None\n    if plugin_wiki_editor:\n    \t    pages = db(w.id>0)(w.is_active==True).select(orderby=w.title)\n    else:\n        \tpages = db(w.is_active==True)(w.is_public==True).select(orderby=w.title)\n     \n    if plugin_wiki_editor:\n        \tform=SQLFORM.factory(Field(\'title\',requires=db.plugin_wiki_page.title.requires),\n                             Field(\'from_template\',requires=IS_EMPTY_OR(IS_IN_DB(db,db.plugin_wiki_page.title))))\n\t\tif form.accepts(request.vars):\n\t\t\ttitle=request.vars.title\n\t        \tpage =db(w.title==title).select().first()\n\t\t\tif not page:\n        \t\t\tpage = w.insert(slug=title.replace(\' \',\'_\'),\n                \t        title=title,\n                        \tbody=request.vars.template and w(slug=request.vars.template).body or \'\')\n            \t\tredirect(URL(r=request,f=\'edit_page\',args=form.vars.title,vars=dict(template=request.vars.from_template or \'\')))\n    else:\n\t\tform=\'\'\n    return dict(taglist=taglist, pages=pages, form=form,query=request.vars.query)\n\ndef index():\n    page= db.plugin_wiki_page(slug="Introduction")\n    if page: pageteaser=page.summary\n    else: pageteaser=""\n    return dict(page=pageteaser,title=page.title,images=images)\n\ndef about():\n    images=db(db.image.show==0).select()\n    w = db.plugin_wiki_page\n    page = w(slug="about_us")\n    if page: pageteaser=page.summary\n    else: pageteaser=""\n    return dict(page=pageteaser,title=\'Language Locations\',images=images)\n\ndef teaching():\n        #redirect(URL(\'index\'))\n    images=db(db.image.show==1).select()\n    return dict(title=\'Language Teaching\',images=images)\n\ndef map():\n    w = db.plugin_wiki_page\n    page = w(title="Index")\n    if plugin_wiki_editor:\n        form=SQLFORM.factory(Field(\'title\',requires=db.plugin_wiki_page.title.requires),  Field(\'from_template\',requires=IS_EMPTY_OR(IS_IN_DB(db,db.plugin_wiki_page.title))))\n        if form.accepts(request.vars):\n            redirect(URL(r=request,f=\'page\',args=form.vars.title.replace(\' \',\'_\'),vars=dict(template=request.vars.from_template or \'\')))\n    else:\n        form=\'\'\n    width = request.vars.width or 600\n    height = request.vars.height or 600\n\n\n    rows = plugin_gmap.set.select()\n    alcs= plugin_gmaps.set.select()\n    for row in rows:\n        row.plugin_gmap_clw= plugin_gmap.clw(row)\n        try:\n                if not row.Web_URL:\n                        row.Web_URL=dblanguage.ALC(id=plugin_gmap.id(row)).Web_URL\n                row.plugin_gmap_color = dblanguage.ALC(id=plugin_gmap.id(row)).Colour.lower()\n                row.plugin_gmap_address= plugin_gmap.address(row)\n                row.plugin_gmap_image= plugin_gmap.image(row)\n                row.plugin_gmap_ALC=plugin_gmap.ALC(row)\n                row.plugin_gmap_alt=plugin_gmap.alt(row)\n                row.plugin_gmap_popup=plugin_gmap.represent(row)\n\t\trow.login=auth.is_logged_in()\n        except:\n                pass\n    for alc in alcs:\n        alc.plugin_gmaps_alc=plugin_gmaps.alcs(alc)\n        alc.plugin_gmaps_color = plugin_gmaps.color(alc)\n        alc.plugin_gmaps_image= plugin_gmaps.image(alc)\n        alc.plugin_gmaps_address=plugin_gmaps.address(alc)\n\talc.login=auth.is_logged_in()\n    #return LOAD(\'plugin_gmap\',\'map\', ajax=True)\n\n    return dict(width=width,height=height, alcs=alcs,  rows=rows,page=page, form=form)\n\ndef contact():\n\n    form=SQLFORM.factory(\n        Field(\'your_email\',requires=IS_EMAIL()),\n        Field(\'question\',\'text\', requires=IS_NOT_EMPTY()))\n    if form.process().accepted:\n        if mail.send(to ="ckutay@cities.org.au",\n        subject="From %s website" % language,\n\treply_to="%s" % form.vars.your_email,\n\tmessage=form.vars.question):\n          pass#   redirect(URL(\'contact\'))\n    elif form.errors:\n        form.errors.your_email=\'Unable to send email\'\n    top_message = "This form will send an email to Muurrbay. We will try to answer your request quickly"   \n    return dict(form=form, top_message=top_message)\n\n\n@auth.requires_login()\ndef edit_resource():\n\tform=None\n        resource_title=request.args(0)\n        if(resource_title==None):redirect(URL(r=request, c=\'plugin_wiki\', f=\'resources\'))\n        transcript=db(db.plugin_wiki_transcript.title==resource_title).select().first()\n        w = db.Resources\n        resource = w(title=resource_title)\n        if not  resource:\n           \tredirect(URL(r=request, c=\'plugin_wiki\', f=\'resources\'))\n\telse:\n                form = crud.update(w, resource, deletable=True, onaccept=crud.archive,\n                next=URL(r=request,c=\'plugin_wiki\', f=\'resource\',args=resource_title))\n\n\tresource_name=os.path.join(\'file\',resource.name)\n\treturn dict(resources=None,resource=resource,resource_name=resource_name, transcript=transcript,form=form)\n\n\n@auth.requires_login()\ndef edit_resource_transcript():\n        resource_title=request.args(0)\n\tform=None\n        if(resource_title==None):redirect(URL(r=request, c=\'plugin_wiki\', f=\'resources\'))\n        resource=db(db.Resources.title==resource_title).select().first()\n        if(resource==None):redirect(URL(r=request, c=\'plugin_wiki\', f=\'resources\'))\n        transcript=db(db.plugin_wiki_transcript.title==resource_title).select().first()\n\tif plugin_wiki_editor:\n           slug=resource_title.replace(\' \',\'_\').lower() \n    \t   w = db.plugin_wiki_transcript\n    \t   transcript= w(title=resource_title)\n    \t   if not transcript:\n        \ttranscript= w.insert(slug=slug,\n                        title=resource_title,\n                        body=request.vars.template and w(slug=request.vars.template).body or \'\')\n           form = crud.update(w, transcript, deletable=True, onaccept=crud.archive,\n                next=URL(r=request,c=\'plugin_wiki\', f=\'resource\',args=resource_title))\n\n\n\treturn dict(form=form, resources=None,resource=resource,transcript=transcript)\n\ndef resources():\n\tResources=db.Resources\n\tresources = db(Resources.id>0).select(orderby=Resources.title)            \n        if(resources==None):redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n        return dict(resource=None,resources=resources)\n\ndef resource():\n\tresource_title=request.args(0)\n\tif(resource_title==None):redirect(URL(r=request, c=\'plugin_wiki\', f=\'resources\'))\n\tresource=db(db.Resources.title==resource_title).select().first()\n\tif(resource==None):redirect(URL(r=request, c=\'plugin_wiki\', f=\'resources\'))   \n\tpage=db(db.plugin_wiki_transcript.title==resource_title)\n\tif (page): page=page.select().first()     \n\tresource_name=os.path.join("file",resource.name)\n\treturn dict(resources=None,resource=resource, resource_name=resource_name, page=page)\n\n\n\ndef tags_by_tag():\n\timport re\n\tif not(request.args):\n    \t     redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n\tpages=None\n\tpage=None\n\tpage_body=None\n\ttitle="No results"\n\ttry:\n\t\t\ttag_id= str(request.args[0])\n\texcept (KeyError, ValueError, TypeError):\n        \t\tredirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n      \t\n\ttag=db.plugin_wiki_tag(id=tag_id)\n\tif (tag!=None):\n\t\t\ttag.is_active=True;\n\t\t \ttags=db(db.plugin_wiki_tag.parent==tag.name).select()\n\ttry:\n\t\tpage_id= str(request.args[1])\n\texcept(KeyError, IndexError,ValueError, TypeError):\n\t\tpage_id=str(request.args[0])\n\tif (page_id.isdigit()):\n\t\ttag_name=db.plugin_wiki_tag(id=tag_id).name\n\n        try:\n                tag=db.plugin_wiki_tag(id=tag_id)\n        except (KeyError, ValueError, TypeError):\n                tag=db.plugin_wiki_tag(name=tag_id)\n                tag_id=tag.id\n        if (tag!=None):\n                tag.is_active=True;\n                tags=db(db.plugin_wiki_tag.parent==tag.name).select()\n        tag_name=tag.name\n        try:\n                page_id= str(request.args[1])\n        except(KeyError, IndexError,ValueError, TypeError):\n                page_id=str(request.args[0])\n        #if(page_id.isdigit()):\n        tag_obj=db.plugin_wiki_tag(id=tag_id)\n\tif tag_obj: tag_name=tag_obj.name\n\telse: tag_name=None\n        tag_parent=tag_obj.parent\n        tag=db.plugin_wiki_tag(name=tag_parent)\n        if (tag): tag.is_active=True\n        \n\n\tquery = ((db.plugin_wiki_page.tags.like(\'%%|%s|%%\' % tag_id)))\n#        pages = db(query).select(orderby=~db.plugin_wiki_page.created_on)\n        if (tags):\n                        page = db(query).select(orderby=~db.plugin_wiki_page.created_on).first()\n                        if (page and page.worksheet):\n                                page.body=wsread_page(page)\n                                title="Latest article:"\n        else:\n                        pages = db(query).select(orderby=~db.plugin_wiki_page.created_on)\n                        if(len(pages)>0):\n                                title="Pages available are:"\n                                page=pages[0]\n                                try:\n                                        page=pages[1]\n                                except:\n                                        title="Page:"\n                                        page=pages[0]\n                                        page.body=wsread_page(pages[0])\n                                        pages=None\n\n        #else:\n    #           w = db.plugin_wiki_page\n   #            page = w(slug=page_id)\n#               if page:\n#                       page=page.select()\n#                       if (page.worksheet):page.body=wsread_page(page)\n        if(page!=None):\n                page_body=page.body\n                #if tag_name!=None:\n                #       page_body=\'\'\n        form=""\n        #read wordlist\n        query = (dblanguage.Bundjalung.Category==tag_name)\n\n        words=  dblanguage(query).select(orderby=dblanguage.Bundjalung.English)\n        for word in words:\n                word=read_word(word)\n        if (words and page==None):\n                title="Words in Category"\n        return dict(tag=tag, words=words,form=form,pages=pages,title=title,page=page,page_body=page_body)\n\n\n\ndef pages_by_tag():\n      if not(request.args):\n         redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n\n      try:\n        tag_name= str(request.args[0])\n\n      except (KeyError, ValueError, TypeError):\n        redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n      else:\n        if (tag_name==None):\n            redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n        if(tag_name=="Contact"):\n\t#contact form\n\t\tredirect(URL(r=request, c=\'plugin_wiki\', f=\'contact\'))\n        if (tag_name=="WordList"):\n\t#word list\n\t\tredirect(URL(r=request, c=\'plugin_wiki\', f=\'dictionary\'))\t\n\ttag_obj=db.plugin_wiki_tag(name=tag_name)\n\n\tif tag_obj: \n\t\ttag_id = tag_obj.id\n\t\t\n\telse: \n\t\ttry:\n\t\t\ttag_obj=db.plugin_wiki_tag(id=tag_name)\n        \t\tif tag_obj: \n\t\t\t\ttag_id = tag_obj.id\n\t\t\t\ttag_name=tag_obj.name\n        \t\telse: tag_id=None\n\t\texcept: tag_id=None \n\t#find parent tag to keep menu open\n\ttag_parent=tag_obj.parent\n\ttag=db.plugin_wiki_tag(name=tag_parent)\n\tif (tag): tag.is_active=True\n        query = ((db.plugin_wiki_page.tags.like(\'%%|%s|%%\' % tag_id))) \n#        pages = db(query).select(orderby=~db.plugin_wiki_page.created_on)\n\tpages = db(query).select()\n\tif pages:\n    \t\tsorted_pages = []\n\n\n\n    \t\tfor row in pages.sort(lambda row: row.created_on,reverse=True):\n        \t\tsorted_pages.append(row)\n\t\tpages=sorted_pages\n\t\tif (pages[0].worksheet):\n\t\t\tpages[0].body=wsread_page(pages[0])\n        else:\n                redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n\n        return dict(tag=tag, pages=pages, selected_tag=tag_name)\n\ndef user():\n\tredirect(URL(r=request, c=\'default\', f=\'user\'))\n\ndef cache_in_ram():\n    import time\n    t=cache.ram(\'time\',lambda:time.ctime(),time_expire=5)\n    return dict(time=t,link=A(\'click to reload\',_href=URL(r=request)))\n\n#@cache(request.env.path_info,time_expire=5,cache_model=cache.disk)\n\n\ndef page():\n    """\n    shows a page\n    """\n    slug= request.args(0) \n    import re\n    if slug=="Index" or slug==None:\n\tredirect(URL(r=request, c=\'plugin_wiki\', f=\'index.html\'))\n    if slug=="Admin_Help" and not auth.user:\n        redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n\n\n    w = db.plugin_wiki_page\n    page = w(slug=slug)\n    #for template\n    if (not page or not page.is_public or not page.is_active):\n    \t if plugin_wiki_editor:\n\t\tredirect(URL(r=request, c=\'plugin_wiki\', f=\'edit_page\', args=request.args))\n\t if (session):session.flash=T("Page not available")\n\n\t redirect(URL(r=request, c=\'plugin_wiki\', f=\'pages\'))\n    elif page and page.role and not auth.has_membership(page.role):    \n        raise HTTP(404)\n\t# parse pages. First History\n    if page.worksheet:\n\tredirect (URL(r=request,c=\'learning\',f=\'page\'))\n\tpage.questions=[]\n    page.attachments=[]\n    a=db.plugin_wiki_attachment\n    query = (a.tablename=="page")&(a.record_id==page.id)\n    page.attachments=db(query).select()\n    tag=page.tags\n    tags=tag.split(\'|\')\n    page_body=page.body\n    if request.extension==\'load\':\n        return plugin_wiki.render(page_body)\n    if request.extension==\'html\':         \n        return dict(form="", title=page.title, page=page, page_body=page_body, slug=slug)\n\ndef page_archive():\n    """\n    shows and old version of a page\n    """\n    id = request.args(0)\n    h = db.plugin_wiki_page_archive\n    page = h(id)\n    if not page or (not plugin_wiki_editor and (not page.is_public or not page.is_active)):\n        raise HTTP(404)\n    elif page and page.role and not auth.has_membership(page.role):\n        raise HTTP(404)\n    if request.extension!=\'html\': return page.body\n    return dict(page=page)\n\ndef create_page():\n    if plugin_wiki_editor:\n                form=SQLFORM.factory(Field(\'title\',requires=db.plugin_wiki_page.title.requires),\n                             Field(\'from_template\',requires=IS_EMPTY_OR(IS_IN_DB(db,db.plugin_wiki_page.modified_on))))\n                if form.accepts(request.vars):\n                        redirect(URL(r=request,c=\'plugin_wiki\',f=\'page_edit\',args=form.vars.title.replace(\' \',\'_\'),vars=dict(template=request.vars.from_template or \'\')))\n    else:\n                form=\'\'\n\n    return dict(form=form, pages=pages)\n\n@auth.requires_login()\ndef edit_page():\n    """\n    edit a page\n    """\n    slug = request.args(0) or \'Index\'\n    tags=""\n    if request.args(1): tags=\'|\'+request.args(1)+\'|\'\n    slug=slug.replace(\' \',\'_\')\n    w = db.plugin_wiki_page\n    w.role.writable = w.role.readable = plugin_wiki_level>1\n    page = w(slug=slug)\n    """\n    db.plugin_wiki_page.tag.default=""\n    db.plugin_wiki_page.update.tags=db.plugin_wiki_page.tags\n    """\n    if not page:\n        db.plugin_wiki_page.tags.default=tags\n\n        page = w.insert(slug=slug,\n                        title=slug.replace(\'_\',\' \'),\n                        tags=tags,\n                        body=request.vars.template and w(slug=request.vars.template).body or \'\')\n    else:\n\ttags = page.tags #in practice \'xyz\' would be a variable\n    if page.title=="Index":\n\tform = crud.update(w, page, deletable=True, onaccept=crud.archive,\n                       next=URL(r=request, c=\'plugin_wiki\', f=\'index\'))\n    else:\n\tif page.worksheet:\n\t\tform = crud.update(w, page, deletable=True, onaccept=crud.archive,\n\t\tnext=URL(r=request,c=\'learning\', f=\'page\',args=slug))\n\telse:\n\t\tform = crud.update(w, page, deletable=True, onaccept=crud.archive,\n                next=URL(r=request,c=\'plugin_wiki\', f=\'page\',args=slug))\n\n    return dict(form=form,page=page,tags=tags)\n\n\ndef page_history():\n    """\n    show page changelog\n    """\n    slug = request.args(0) or \'index\'\n    w = db.plugin_wiki_page\n    h = db.plugin_wiki_page_archive\n    page = w(slug=slug)\n    history = db(h.current_record==page.id).select(orderby=~h.modified_on)\n    return dict(page=page, history=history)\n\n\ndef tags():\n    form = crud.create(db.plugin_wiki_tag)\n    tags = db(db.plugin_wiki_tag.id > 0).select(orderby=db.plugin_wiki_tag.id)\n    return dict(form=form, tags=tags)\n\n\ndef edit_tag():\n    if not request.args:\n        session.flash = T(\'Invalid tag\')\n        redirect(URL(r=request, f=\'_tags\'))\n    form = crud.update(db.plugin_wiki_tag, request.args[0], deletable=True)\n    return dict(form=form)\n\n##########################################################\n# ajax callbacks\n##########################################################\ndef attachments():\n    """\n    allows to edit page attachments\n    """\n    a=db.plugin_wiki_attachment\n    a.tablename.default=tablename=request.args(0)\n    a.record_id.default=record_id=request.args(1)\n    #if request.args(2): a.filename.writable=False\n    form=crud.update(a,request.args(2),deletable=True,\n                     next=URL(r=request,args=request.args[:2]))\n    if request.vars.list_all:\n        query = a.id>0\n    else:\n        query = (a.tablename==tablename)&(a.record_id==record_id)\n    rows=db(query).select(orderby=a.name)\n    return dict(form=form,rows=rows)\n\ndef attachment():\n    """\n    displays an attachments\n    """\n    short=request.args(0)\n    if plugin_wiki_authorize_attachments and \\\n            not short in session.plugin_wiki_attachments:\n        raise HTTP(400)\n    a=db.plugin_wiki_attachment\n    record=a(short.split(\'.\')[0])\n    if not record: raise HTTP(400)\n    request.args[0]=record.filename\n    return response.download(request,db)\n\n\ndef images_by_name():\n    short=request.args(0)\n    a=db.plugin_wiki_images\n    record=a(short[0])\n    if not record:return  record\n    request.args[0]=record.filename\n    return response.download(request,db)\n\ndef images():\n    title="Images"\n    images = dblanguage().select(dblanguage.images.ALL, orderby=dblanguage.images.title)\n\n    return dict(images=images)\n\ndef show_image():\n    image = dblanguage.images(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    dblanguage.post.image_id.default = image.id\n    form = SQLFORM(dblanguage.post)\n    if form.process().accepted:\n        response.flash = \'your comment is posted\'\n    comments = dblanguage(dblanguage.post.image_id==image.id).select()\n    return dict(image=image, comments=comments, form=form)\n\n@auth.requires_login()\ndef manage_images():\n    grid = SQLFORM.smartgrid(dblanguage.images,linked_tables=[\'post\'])\n    return dict(grid=grid)\n\ndef download():\n    return response.download(request, db)\n\ndef comment():\n    """\n    post a comment\n    """\n    tablename, record_id = request.args(0), request.args(1)\n    table=db.plugin_wiki_comment\n    if record_id==\'None\': record_id=0\n    table.tablename.default=tablename\n    table.record_id.default=record_id\n    if auth.user:\n        form = crud.create(table)\n    else:\n        form = A(T(\'login to comment\'),_href=auth.settings.login_url)\n    comments=db(table.tablename==tablename)\\\n        (table.record_id==record_id).select()\n    return dict(form = form,comments=comments)\n###\n##@auth.requires_login()\n##\ndef jqgrid():\n    """\n    jqgrid callback retrieves records\n    http://trirand.com/blog/jqgrid/server.php?q=1&_search=false&nd=1267835445772&rows=10&page=1&sidx=amount&sord=asc&searchField=&searchString=&searchOper=\n    """\n    from gluon.serializers import json\n    import cgi\n    hash_vars = \'dbname|tablename|columns|fieldname|fieldvalue|user\'.split(\'|\')\n    if not URL.verify(request,hmac_key=auth.settings.hmac_key,\n                      hash_vars=hash_vars,salt=auth.user_id):\n        raise HTTP(404)    \n    tablename = request.vars.tablename or error()\n    columns = (request.vars.columns or error()).split(\',\')\n    rows=int(request.vars.rows or 25)\n    page=int(request.vars.page or 0)\n    sidx=request.vars.sidx or \'id\'\n    sord=request.vars.sord or \'asc\'\n    searchField=request.vars.searchField\n    searchString=request.vars.searchString\n    searchOper={\'eq\':lambda a,b: a==b,\n                \'nq\':lambda a,b: a!=b,\n                \'gt\':lambda a,b: a>b,\n                \'ge\':lambda a,b: a>=b,\n                \'lt\':lambda a,b: a<b,\n                \'le\':lambda a,b: a<=b,\n                \'bw\':lambda a,b: a.like(b+\'%\'),\n                \'bn\':lambda a,b: ~a.like(b+\'%\'),\n                \'ew\':lambda a,b: a.like(\'%\'+b),\n                \'en\':lambda a,b: ~a.like(\'%\'+b),\n                \'cn\':lambda a,b: a.like(\'%\'+b+\'%\'),\n                \'nc\':lambda a,b: ~a.like(\'%\'+b+\'%\'),\n                \'in\':lambda a,b: a.belongs(b.split()),\n                \'ni\':lambda a,b: ~a.belongs(b.split())}\\\n                [request.vars.searchOper or \'eq\']\n    table=globals()[dbname][tablename]\n    if request.vars.fieldname:\n        names = request.vars.fieldname.split(\'|\')\n        values = request.vars.fieldvalue.split(\'|\')\n        query = reduce(lambda a,b:a&b,\n                       [table[names[i]]==values[i] for i in range(len(names))])\n    else:\n        query = table.id>0\n    dbset = table._db(query)\n    if searchField: dbset=dbset(searchOper(table[searchField],searchString))\n    orderby = table[sidx]\n    if sord==\'desc\': orderby=~orderby\n    limitby=(rows*(page-1),rows*page)\n    fields = [table[f] for f in columns]\n    records = dbset.select(orderby=orderby,limitby=limitby,*fields)\n    nrecords = dbset.count()\n    items = {}\n    items[\'page\']=page\n    items[\'total\']=int((nrecords+(rows-1))/rows)\n    items[\'records\']=nrecords\n    readable_fields=[f.name for f in fields if f.readable]\n    def f(value,fieldname):\n        r = table[fieldname].represent\n        if r: value=r(value)\n        try: return value.xml()\n        except: return cgi.escape(str(value))\n    items[\'rows\']=[{\'id\':r.id,\'cell\':[f(r[x],x) for x in readable_fields]} \\\n                       for r in records]\n    return json(items)\n\n\ndef _tags():\n    import re\n    db_tag = db.plugin_wiki_tag\n    db_link = db.plugin_wiki_link\n    table_name=request.args(0)\n    record_id=request.args(1)\n    if not auth.user_id:\n        return \'\'\n    form = SQLFORM.factory(Field(\'tag_name\',requires=IS_SLUG()))\n    if request.vars.tag_name:\n        for item in request.vars.tag_name.split(\',\'):\n            tag_name = re.compile(\'\\s+\').sub(\' \',item).strip()\n            tag_exists = tag = db(db_tag.name==tag_name).select().first()\n            if not tag_exists:\n                tag = db_tag.insert(name=tag_name, links=1)\n            link = db(db_link.tag==tag.id)\\\n                (db_link.table_name==table_name)\\\n                (db_link.record_id==record_id).select().first()\n            if not link:\n                db_link.insert(tag=tag.id,\n                               table_name=table_name,record_id=record_id)\n                if tag_exists:\n                    tag.update_record(links=tag.links+1)\n    for key in request.vars:\n        if key[:6]==\'delete\':\n            link_id=key[6:]\n            link=db_link[link_id]\n            del db_link[link_id]\n            db_tag[link.tag] = dict(links=db_tag[link.tag].links-1)\n    links = db(db_link.table_name==table_name)\\\n              (db_link.record_id==record_id).select()\\\n              .sort(lambda row: row.tag.name.upper())\n    return dict(links=links, form=form)\n\ndef cloud():\n    tags = db(db.plugin_wiki_tag.links>0).select(limitby=(0,20))\n    if tags:\n        mc = max([tag.links for tag in tags])\n    return DIV(_class=\'plugin_wiki_tag_cloud\',*[SPAN(A(tag.name,_href=URL(r=request,c=\'plugin_wiki\',f=\'page\',args=(\'tag\',tag.id))),_style=\'font-size:%sem\' % (0.8+1.0*tag.links/mc)) for tag in tags])\n\n@auth.requires(plugin_wiki_editor)\ndef widget_builder():\n    """\n    >> inspect.getargspec(PluginWikiWidgets.tags)\n    ([\'table\', \'record_id\'], None, None, (\'None\', None))\n    >>> dir(PluginWikiWidgets)\n    """\n    import inspect\n    name=request.vars.name\n    if plugin_wiki_widgets==\'all\':\n        widgets = [\'\']+[item for item in dir(PluginWikiWidgets) if item[0]!=\'_\']\n    else:\n        widgets = plugin_wiki_widgets\n    form=FORM(LABEL(\'Widget Name: \'), SELECT(_name=\'name\',value=name,\n                     _onchange="jQuery(this).parent().submit()",*widgets))\n    widget_code=\'\'\n    if name in widgets: \n        a,b,c,d=inspect.getargspec(getattr(PluginWikiWidgets,name))\n        a,d=a or [],d or []\n        null = lambda:None\n        d=[null]*(len(a)-len(d))+[x for x in d]\n        ESC=\'x\'\n        fields = [Field(ESC+a[i],label=a[i],default=d[i]!=null and d[i] or \'\',\n                        requires=(d[i]==null) and IS_NOT_EMPTY() or None,\n                        comment=(d[i]==null) and \'required\' or \'\') \\\n                      for i in range(len(a))]\n        form_widget=SQLFORM.factory(hidden=dict(name=name),*fields)\n        doc = getattr(PluginWikiWidgets,name).func_doc or \'\'\n        if form_widget.accepts(request.vars):\n            keys=[\'name: %s\' % request.vars.name]\n            for name in a:\n                if request.vars[ESC+name]:\n                    keys.append(name+\': %s\' % request.vars[ESC+name])\n            widget_code=CODE(\'``\\n%s\\n``:widget\' % \'\\n\'.join(keys))\n    else:\n        doc=\'\'\n        form_widget=\'\'\n    return dict(form=form,form_widget=form_widget,doc=doc,\n                widget_code=widget_code)\n\n\ndef star_rate():\n    N=5 #max no of stars (if you use split stars you\'ll get a rating out of 10)\n    pm = db.plugin_wiki_rating\n    pa = db.plugin_wiki_rating_aux\n    tablename = request.args(0)\n    record_id = request.args(1)\n    rating = abs(float(request.vars.rating or 0)) \n    \n    try:\n        db[tablename] #if there\'s no such table. Salute.\n        if rating>N or rating<0: raise Exception #similar if rating is simulated.\n        if not db[tablename][record_id]: raise Exception #also if there\'s no specified record in table\n        if not auth.user_id: raise Exception #user has to login to rate\n    except:\n        return \'\'\n        \n    master = db(pm.tablename==tablename)(pm.record_id==record_id).select().first()    \n    \n    if master:\n        master_rating, master_counter = master.rating, master.counter\n    else:\n        master_rating, master_counter = 0, 0\n        master=pm.insert(tablename=tablename,record_id=record_id,rating=master_rating,counter=master_counter)        \n        \n    record = db(pa.master==master)(pa.created_by==auth.user_id).select().first()\n        \n    if rating:\n        if not record:\n           record = pa.insert(master=master,rating=rating,created_by=auth.user_id)\n           master_rating = (master_rating*master_counter + rating)/(master_counter+1)\n           master_counter = master_counter + 1\n        else:\n           master_counter = master_counter\n           master_rating = (master_rating*master_counter - record.rating + rating)/master_counter\n           record.update_record(rating=rating)\n        master.update_record(rating=master_rating, counter=master_counter)        \n    try:  \n        db[tablename][record_id][\'rating\']\n    except:\n        return \'\'\n    else:\n        db[tablename][record_id].update_record(rating=master_rating)\n        \n    return \'\'\n   \n\nresponse._vars=response._caller(resource)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/local/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/usr/local/web2py/applications/Bundjalung/controllers/plugin_wiki.py", line 746, in <module>\n  File "/usr/local/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/local/web2py/applications/Bundjalung/controllers/plugin_wiki.py", line 179, in resource\n    resource=db(db.Resources.title==resource_title).select().first()\n  File "/usr/local/web2py/gluon/dal/objects.py", line 2066, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/usr/local/web2py/gluon/dal/adapters/base.py", line 1232, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/usr/local/web2py/gluon/dal/adapters/base.py", line 1197, in _select_aux\n    self.execute(sql)\n  File "/usr/local/web2py/gluon/dal/adapters/base.py", line 1319, in execute\n    return self.log_execute(*a, **b)\n  File "/usr/local/web2py/gluon/dal/adapters/base.py", line 1313, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py", line 174, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/lib64/python2.7/site-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, "Table \'Bundjalung.Resources\' doesn\'t exist")\n'
p11
s.