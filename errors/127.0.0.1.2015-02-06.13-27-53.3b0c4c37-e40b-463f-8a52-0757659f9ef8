(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Rows' object has no attribute 'color'"
p3
sS'layer'
p4
S'/usr/local/web2py/applications/Bundjalung/controllers/language.py'
p5
sS'code'
p6
S'import string\n\n# NOte the existence of languageList!=None means this is part of dictinary interface\nlangaugeList=language\n\ndef index():\n    \n        words=dblanguage(languagewords.id>0).select( orderby=languagewords.English)\n\n\n    \treturn dict(words=words)\n\n\n#FIXME language dependant\nimport os\nimport ftfy\n\ndef fix_word(word):\n\n    word.Comment=fix_bad_unicode(word.Comment)\n    word.Gold_Coast_Tweed=fix_bad_unicode( word.Gold_Coast_Tweed)\n    word.Lower_Richmond=fix_bad_unicode(word.Lower_Richmond)\n    word.Middle_Clarence=fix_bad_unicode( word.Middle_Clarence)\n    word.Condamine_Upper_Clarence=fix_bad_unicode(word.Condamine_Upper_Clarence)\n    word.Copmanhurst=fix_bad_unicode(   word.Copmanhurst)\n\n    return word\n\ndef translateunicode():\n    s=None\n    t=None\n    if (request.vars):\n\t    text=request.vars.text_input\n\t    s=unicode(text,\'UTF-8\')\n\t    t=ftfy.fix_text_encoding(s)\n    return dict(string=s, translate=t)\n\ndef  fix_bad_unicode(text):\n    s=unicode(text,"UTF-8")\n    s=ftfy.fix_text_encoding(s)\n    return s\n\ndef search(searchterm,typequery, dialect, extra):\n    words=None\n    if extra=="Exact":\n    \tif typequery=="English":\n    \t\tquery=(dblanguage.Bundjalung.Search_English==searchterm)|dblanguage.Bundjalung.Search_English.startswith(searchterm+\' ;\')|(dblanguage.Bundjalung.Search_English.contains("; "+searchterm ))|(dblanguage.Bundjalung.Search_English.endswith("; "+searchterm))\n    \telse:\n                query= dblanguage.Bundjalung.Language_Word==searchterm\n    else:\n\t if typequery=="English":\n\t\tquery= dblanguage.Bundjalung.Search_English.contains(searchterm)\n\t else:\n\t        query= dblanguage.Bundjalung.Language_Word.contains(searchterm)\n\n    if dialect!="All":\n\tif dialect=="Middle Clarence":\n\t\tquery=query&(dblanguage.Bundjalung.Middle_Clarence!="")\n\telif dialect=="Condamine_Upper_Clarence":\n\t\t query=query&(dblanguage.Bundjalung.Condamine_Upper__Clarence!="")\n\telif dialect=="Lower_Richmond":\n\t\t query=query&(dblanguage.Bundjalung.Lower_Richmond!="")\n\telif dialect=="Gold_Coast_Tweed":\n\t\t query=query&(dblanguage.Bundjalung.Gold_Coast_Tweed!="")\n\telse:\t\n\t\tquery=query&(dblanguage.Bundjalung.Copmanhurst!="")\n    words=dblanguage(query).select()\n    return words\n\ndef dictionary():\n    names = db(db.dialect.id>0).select(db.dialect.name)\n    numerics=[]\n    dialectid=None\n    alphanumeric=""\n    sort=request.vars[\'type\']\n    searchterms=request.vars[\'query\']\n    if searchterms=="None":\n    \tsearchterms=""\n    try:\n\talphanumeric=request.vars[\'numeric\']\n    \tdialectid=request.vars[\'dialect\']\n    except:\n\tpass\n    exact=alphanumeric \n    dialect=""\n    if dialectid: \n\tdialectRow=db.dialect(name=dialectid)\n    \tif dialectRow: dialect=dialectRow.name\n    if searchterms and searchterms!="":\n        response.start=False\t\n\twordlist =search(searchterms,sort,dialect,alphanumeric)\n        numerics=[\'Exact\',\'Related\']\t\n\tif wordlist==[]:\n\t\twordlist =search(searchterms,sort,dialect,\'Related\')\n\n    else:\n    \twordlist=[]\n    \tif (not(sort)):\n \t\tsort="English"\n\tif (not alphanumeric):\n\t\talphanumeric=\'A\'\n    \tif(sort==\'English\'):\n\t\tnumerics=[\'A\',\'B\',\'C\',\'D\',\'E\',\'F\',\'G\',\'H\',\'I\',\'J\',\'K\',\'L\',\'M\',\'N\',\'O\',\'P\',\'Q\',\'R\',\'S\',\'T\',\'U\',\'V\',\'W\',\'X\',\'Y\',\'Z\']\n\t\tcondition = dblanguage.Bundjalung.Search_English.startswith(alphanumeric.lower())|dblanguage.Bundjalung.Search_English.startswith(\'-\'+alphanumeric.lower())\n        \twordlist=dblanguage(condition).select(dblanguage.Bundjalung.ALL, orderby=dblanguage.Bundjalung.Search_English)\n    \telif (sort==\'Category\'):\n        \twordlist=dblanguage().select(dblanguage.Bundjalung.ALL, orderby=dblanguage.Bundjalung.Category)\n    \telse:\n\t\tnumerics=[\'A\',\'BA\',\'BE\',\'BI\', \'BU\',\'D\',\'J\',\'L\',\'M\',\'N\',\'NG\',\'NY\',\'O\',\'S\',\'WA\', \'WE\', \'WI\', \'WU\',\'YA\',\'YE\',\'Yi\',\'YU\']\n\t\tcondition = dblanguage.Bundjalung.Language_Word.startswith(alphanumeric.lower())|dblanguage.Bundjalung.Language_Word.startswith(\'-\'+alphanumeric.lower())\n\t\tif alphanumeric==\'N\':\n\t\t\tc2= (dblanguage.Bundjalung.Language_Word.startswith("na"))\n\t\t\tc3=(dblanguage.Bundjalung.Language_Word.startswith("ne"))\n\t\t\tc4=(dblanguage.Bundjalung.Language_Word.startswith("ni"))\n\t\t\tc5= (dblanguage.Bundjalung.Language_Word.startswith("nu"))\n        \t\twordlist=dblanguage(c2|c3|c4|c5).select(dblanguage.Bundjalung.ALL, orderby=dblanguage.Bundjalung.Language_Word)\n\t\t\twl2=dblanguage(c3).select(dblanguage.Bundjalung.ALL, orderby=dblanguage.Bundjalung.Language_Word)\n\t \telse:\n\t\t\twordlist=dblanguage(condition).select(orderby=dblanguage.Bundjalung.Language_Word)\n\t\n    for word in wordlist:\n\tread_word(word)\n    top_message = language +" Dictionary"\n    w = db.plugin_wiki_page\n    page = w(slug=\'usedictionary\')    \n    if page: pageteaser=page.summary\n    else: pageteaser=""\n    return dict(start=response.start, page=pageteaser, dialect= dialect, sort=sort, exact=exact, names=names, query=searchterms, words=wordlist, top_message=top_message, numeric= alphanumeric, numerics=numerics)\n\n\ndef wordlist():\n  \tresults= dictionary()\n\tresults[\'start\']=False\t\n\treturn results\n\n\ndef dictionarysort():\n    sort=request.args(0)\n    if(sort==None):sort=\'English\'\n    wordlist=dblanguage(dblanguage.Bundjalung.Category==sort).select(dblanguage.Bundjalung.ALL, orderby=dblanguage.Bundjalung.Language_Word)\n    for word in wordlist:\n        read_word(word)\n    top_message = language +" List sorted for "+sort\n    return dict(words=wordlist, top_message=top_message)\n\n\ndef view_word():\n    word_id=request.args(0)\n    words=dblanguage.Bundjalung\n    word, examples=read_word(dblanguage.Bundjalung(dblanguage.Bundjalung.id==word_id))\n    word=fix_word(word)\n\n    link = URL(r=request, c=\'language\' ,f=\'edit_word\', args=word_id)\n    return dict(link = link, word=word, exampleSentences=examples, language=language )\n\ndef view_word_popup():\n    word_id=request.args(0)\n    words=dblanguage.Bundjalung\n    word,examples =read_word(dblanguage.Bundjalung(dblanguage.Bundjalung.id==word_id))\n    word=fix_word(word)\n    link = URL(r=request, c=\'language\' ,f=\'edit_word\', args=word_id)\n    return dict(link = link, word=word)\n\n\ndef translate():\n    word = request.args(0) or \'\'\n    if not request.args:\n        redirect(URL(r=request, c=\'language\' ,f=\'index\'))\n    lang= request.args(1)\n\n    if lang==\'English\':\n\twords=(languagewords.id>0)(languagewords.Search_English==word).select( orderby=languagewords.language)\n    elif not lang: \n\tlang=language\n\twords=(languagewords.id>0)(languagewords.language==word).select( orderby=languagewords.Search_English)\n\t\n    return  dict(words=words)\n\ndef category():\n\n    word = request.args(0) or \'\'\n    if not request.args:\n        redirect(URL(r=request, c=\'language\' ,f=\'index\'))\n    category= request.args(1)\n\n    words=(languagewords.id>0)(languagewords.Category==category).select( orderby=languagewords.language)\n\n    return  dict(words=words)\n\n@auth.requires_login()\ndef create_word():\n    if not request.args:\n        redirect(URL(r=request,c=\'language\', f=\'index\'))\n    create_word = request.args(0)\n    name=create_word.replace(\'_\',\' \')\n\n    word=languageword(Search_English==name)\n    form = crud.create(dblanguageword)\n    return dict(word=word, form=form)\n\n    \n# edit clws\n@auth.requires_login()\ndef edit_word():\n    word_id=request.args(0)\n    try:\n        integer=True\n        word_id=int(word_id)\n    except :\n        integer=False\n \tname=word_id.replace(\'_\',\' \')\n\n    w = dblanguage.Bundjalung\n    if integer:\n\tword = w(id=word_id)\n    else:\n\tword = w(Bundjalung=name)\n    if not word:\n        word = w.insert(Bundjalung=name)\n    word, examples =read_word(word)\n    if auth.has_membership(auth.id_group(\'developer\')):\n\n\t    form = crud.update(w, word, deletable=True, onaccept=crud.archive,\n                       next=URL(r=request,c=\'language\', f=\'view_word\',args=request.args))\n    else:\n            form = crud.update(w, word, deletable=False, onaccept=crud.archive,\n                       next=URL(r=request,c=\'language\', f=\'view_word\',args=request.args))\n    return dict(form=form,word=word,examples=examples)\n\ndef read_word(word):\n\tword.Sound=""\n\tif (not word.SoundFile or word.SoundFile==\'\'): word.Sound=word.Language_Word+".mp3"\n        if(os.path.exists(\'applications/\'+language+\'/uploads/media/sounds/\'+word.Sound)):\n\t    word.Sound = URL(r=request, c=\'default\',f=\'filedownload/media/sounds\', args=word.Sound)\n        else:\n\t   if (not word.SoundFile or word.SoundFile==\'\'): \n\t\tword.Sound=word.Language_Word+".wav"\n           if(os.path.exists(\'applications/\'+language+\'/uploads/media/sounds/\'+word.Sound)):\n\t\tword.Sound = URL(r=request, c=\'default\',f=\'filedownload/media/sounds\', args=word.Sound)\n\t   else: word.Sound=None\n        word.Image=word.Image.strip()\n\tword.ImageLink=word.Image\n\tif(word.Image==None or word.Image==""):word.Image=word.Search_English\n\tend=string.find(word.Image,\';\');\n\tif end>0:word.Image=word.Image[0:end]\n        word.Image=word.Image.replace(\', \',\'_\')\n\n\tword.Image=word.Image.replace(\' \',\'_\')\n        if(os.path.exists(\'applications/\'+language+\'/uploads/media/images/\'+word.Image+\'.gif\')):\n                word.ImageLink = URL(r=request, c=\'default\',f=\'image\', args=word.Image+\'.gif\')\n        else: word.ImageLink=""\n        if(word.ImageLink==""):\n                if(os.path.exists(\'applications/\'+language+\'/uploads/media/images/\'+word.Image+\'.jpg\')):\n\t\t\tword.ImageLink = URL(r=request, c=\'default\',f=\'image\', args=word.Image+\'.gif\')\n                else: word.Image=""\n\tcondition = dblanguage.BundjalungExamples.language_id==word.id\n        examplelist=dblanguage(condition).select(dblanguage.BundjalungExamples.ALL)\n\tword.dialect=""\n\tcolour="black"\n\tcolour=db(db.dialect.name=="Gold_Coast_Tweed").select()\n\tlogging.warn(colour)\n\tlogging.warn(\'here\')\n\tlogging.warn(colour[0].color)\n\tlogging.warn(colour)\n\tif word.Gold_Coast_Tweed.strip() !="":\n\t\tword.dialect+="Gold_Coast_Tweed, "\n\t\tcolour=db(db.dialect.name=="Gold_Coast_Tweed").select().color\n\tif word.Lower_Richmond.strip()!="":\n\t\tword.dialect+="Lower_Richmond, "\n\t\tcolour=db(db.dialect.name=="Lower_Richmond").select().color\n\n        if word.Middle_Clarence.strip()!="":\n                word.dialect+="Middle_Clarence, "\n \t\tcolour=db(db.dialect.name=="Middle_Clarence").select().color\n\n        if word.Condamine_Upper_Clarence.strip()!="":\n                word.dialect+="Condamine_Upper_Clarence, "\n\t \tcolour=db(db.dialect.name=="Condamine_Upper_Clarence").select().color\n\n        if word.Copmanhurst.strip()!="":\n                word.dialect+="Copmanhurst "\n\t \tcolour=db(db.dialect.name=="Copmanhurst").select().color\n\n#remove \',\'\n\tword.dialect = word.dialect.strip()[:-1]\n# if only one dialect\n \tif word.dialect.find(\',\')<0:\n\t\tword.color=color\n\telse:\n\t\tword.color=\'black\'\n        return word, examplelist\n\n\nresponse._vars=response._caller(dictionary)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/local/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/usr/local/web2py/applications/Bundjalung/controllers/language.py", line 294, in <module>\n  File "/usr/local/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/local/web2py/applications/Bundjalung/controllers/language.py", line 122, in dictionary\n    read_word(word)\n  File "/usr/local/web2py/applications/Bundjalung/controllers/language.py", line 278, in read_word\n    colour=db(db.dialect.name=="Condamine_Upper_Clarence").select().color\nAttributeError: \'Rows\' object has no attribute \'color\'\n'
p11
s.